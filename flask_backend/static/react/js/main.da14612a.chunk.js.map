{"version":3,"sources":["logo.svg","ImageClassifier.js","App.js","reportWebVitals.js","index.js"],"names":["ImageClassifier","net","camera","React","useRef","figures","webcamElement","current","run","a","mobilenet","tf","webcam","resizeWidth","resizeHeight","capture","img","classify","result","innerText","className","probability","dispose","useEffect","autoPlay","playsInline","muted","ref","width","height","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAAe,I,gDCmDAA,EA9CS,WACtB,IAAIC,EACEC,EAASC,IAAMC,SACfC,EAAUF,IAAMC,SAChBE,EAAgBJ,EAAOK,QAEvBC,EAAG,uCAAG,gCAAAC,EAAA,sEACEC,MADF,cACVT,EADU,gBAGWU,IAAQC,OAAON,EAAe,CACjDO,YAAa,IACbC,aAAc,MALN,OAGJF,EAHI,8BAQUA,EAAOG,UARjB,cAQFC,EARE,iBASaf,EAAIgB,SAASD,GAT1B,eASFE,EATE,OAWJb,EAAQE,UACVF,EAAQE,QAAQY,UAAhB,uBAA4CD,EAAO,GAAGE,UAAtD,4BAAmFF,EAAO,GAAGG,cAG/FL,EAAIM,UAfI,UAiBFX,MAjBE,mEAAH,qDAyBT,OAJFR,IAAMoB,WAAU,WACdf,OAIE,qCACE,uBACEgB,UAAQ,EACRC,aAAW,EACXC,OAAO,EACPC,IAAKzB,EACL0B,MAAM,QACNC,OAAO,UAET,qBAAKF,IAAKtB,QChCDyB,MAVf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCIOW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"js/main.da14612a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"media/logo.6ce24c58.svg\";","\r\nimport React from 'react';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet';\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nconst ImageClassifier = () => {\r\n  let net;\r\n  const camera = React.useRef();\r\n  const figures = React.useRef();\r\n  const webcamElement = camera.current;\r\n\r\n  const run = async () => {\r\n    net = await mobilenet.load();\r\n\r\n    const webcam = await tf.data.webcam(webcamElement, {\r\n      resizeWidth: 220,\r\n      resizeHeight: 227,\r\n    });\r\n    while (true) {\r\n      const img = await webcam.capture();\r\n      const result = await net.classify(img);\r\n\r\n      if (figures.current) {\r\n        figures.current.innerText = `prediction : ${result[0].className} \\n probability: ${result[0].probability}`;\r\n      }\r\n\r\n      img.dispose();\r\n\r\n      await tf.nextFrame();\r\n    }\r\n  };\r\n  \r\nReact.useEffect(()=> {\r\n  run();\r\n});\r\n\r\n  return (\r\n    <>\r\n      <video\r\n        autoPlay\r\n        playsInline\r\n        muted={true}\r\n        ref={camera}\r\n        width=\"870/4\"\r\n        height=\"534/4\"\r\n      />\r\n      <div ref={figures}></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ImageClassifier;","import logo from './logo.svg';\nimport './App.css';\nimport ImageClassifier from './ImageClassifier';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ImageClassifier></ImageClassifier>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}